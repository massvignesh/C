1 swapp

echo -n "Enter value for A: "
read a

echo -n "Enter value for B: "
read b

temp=$a
a=$b
b=$temp

echo "Values after Swapping"
echo "A Value is $a"
echo "B Value is $b"


2oddeveb

echo "Enter the Number"
read n
r=$((n % 2))
if [ $r -eq 0 ]; then
    echo "$n is Even number"
else
    echo "$n is Odd number"
fi


3.string compression

echo -n "Enter the first string:"
read s1
echo -n "Enter the second string:"
read s2
if [ "$s1" = "$s2" ]; then
    echo "Strings are the same"
else
    echo "Strings are distinct"
fi


Write-Host "Enter Fahrenheit: "
$f = Read-Host

$c = [math]::Round(($f - 32) * 5 / 9, 2)

Write-Host "Centigrade is: $c"



____________________________________________


PROGRAM:

/* System call fork, getpid, exexc */

#include<stdio.h>

main(int are,char*ar[])

int pid; char s[100]; pid-fork();

if(pid<0)

printf("error");

else if(pid>0)

wait(NULL);

printf("\n Parent Process:\n"); printf("\n\tParent Process id:%d\t\n",getpid()); execlp("cat","cat", ar[1].(char*)0);

error("can't execute cat %s,",ar[1]);

1

else

printf("\nChild process:");

printf("\n\tChildprocess parent id:\t%d",getppid());

printf(s,"\n\tChild process id:\t%d",getpid());

write(1,5,strlen(s));

printf(" ");

printf(" ");

printf(" ");

execvp(ar[2],&ar[2]);

error("can't execute %s", ar[2]);
}
}

_________________________________________

PROGRAM:

Recursively descend a directory hierarchy pointing a file */

#include<stdio.h>

#include dirent.h>

#include<errno.h>

#include<fcntl.h>

#include <unistd.h>

int main(int argc, char *argv[])

1

struct dirent direntp; DIR "dirp; if(arge!-2)

1

printf("ussage %s directory name \n",argv[0]);

return 1;

if((dirp-opendir(argv[1])) NULL)

perror("Failed to open directory \n");

return 1;

while((direntp-readdir(dirp))!=NULL)

printf("%s\n",direntpd_name);

while((closedir(dirp)-1)&&(ermo-EINTR));

return 0;
}


____________________



PROGRAM:

FCFS CPU Scheduling */

#include<stdio.h>

#include<conio.h>

main()

int bt[20], wt[20], tat[20], i, n;

float wtavg, tatavg,

clrscr();

printf("\nEnter the number of processes ");

scanf("%d", &n);

for(i=0;i<n;i++)

{

printf("\nEnter Burst Time for Process %d", i);

scanf("%d", &bt[i]);

1

wt[0]

wtavg 0:

tat[0] tatavgbt[0];

for(i=1;i<n;i++)

wt[i]wt[i-1]+bt[i-1];

tat[i] = tat[i-1] +bt[i];

wtavg wtavg+ wt[i];

tatavgtatavg+tat[i];

1

printf("\t PROCESS BURST TIME WAITING TIME TURNAROUND TIME\n"); for(i=0;i<n;i++)

printf("\n\t P%d \t\t %d \t\t %d \t\t %d", i, bt[i], wt[i]. tat[i]); printf("\nAverage Waiting Time - %f", wtavg/n);

printf("\nAverage Turnaround Time %f", tatavg/n);

getch(); }
